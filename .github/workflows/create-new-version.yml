# This workflow creates a new version of the package. Can be used for both dev and prod.
# Package version is determined from pyproject.toml.
# Triggered on pushes/merges to master and can be triggered automatically
name: Create new package version

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint
        uses: ./.github/actions/lint

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test
        uses: ./.github/actions/test

  build:
    name: Build package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build
        uses: ./.github/actions/build-package

  deploy:
    name: Deploy package
    runs-on: ubuntu-latest
    needs: build

    permissions:
      id-token: write  # mandatory for Trusted Publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: "https://test.pypi.org/legacy/"
          verbose: 'true'

  release:
    name: Create tag & release
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Download artifacts (Wheel & SDist)
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Get package version
        run: |
          pip install toml-cli
          VERSION=$(toml get --toml-path pyproject.toml project.version)
          echo "::notice::Package Version: $VERSION"
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $VERSION \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} $VERSION" \
              --generate-notes

      - name: Upload dists to release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload $VERSION dist/*
